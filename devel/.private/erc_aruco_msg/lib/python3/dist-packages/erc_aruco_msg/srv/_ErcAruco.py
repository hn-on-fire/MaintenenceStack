# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from erc_aruco_msg/ErcArucoRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ErcArucoRequest(genpy.Message):
  _md5sum = "8c2277db7b92fad0602e09f16e8162a6"
  _type = "erc_aruco_msg/ErcArucoRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32[3] tag1
float32[3] tag2
float32[3] tag3
float32[3] tag4
float32[3] tag5
float32[3] tag6
float32[3] tag7
float32[3] tag8
float32[3] tag9
float32[3] tag10
float32[3] tag11
float32[3] tag12
float32[3] tag13
float32[3] tag14
"""
  __slots__ = ['tag1','tag2','tag3','tag4','tag5','tag6','tag7','tag8','tag9','tag10','tag11','tag12','tag13','tag14']
  _slot_types = ['float32[3]','float32[3]','float32[3]','float32[3]','float32[3]','float32[3]','float32[3]','float32[3]','float32[3]','float32[3]','float32[3]','float32[3]','float32[3]','float32[3]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       tag1,tag2,tag3,tag4,tag5,tag6,tag7,tag8,tag9,tag10,tag11,tag12,tag13,tag14

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ErcArucoRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.tag1 is None:
        self.tag1 = [0.] * 3
      if self.tag2 is None:
        self.tag2 = [0.] * 3
      if self.tag3 is None:
        self.tag3 = [0.] * 3
      if self.tag4 is None:
        self.tag4 = [0.] * 3
      if self.tag5 is None:
        self.tag5 = [0.] * 3
      if self.tag6 is None:
        self.tag6 = [0.] * 3
      if self.tag7 is None:
        self.tag7 = [0.] * 3
      if self.tag8 is None:
        self.tag8 = [0.] * 3
      if self.tag9 is None:
        self.tag9 = [0.] * 3
      if self.tag10 is None:
        self.tag10 = [0.] * 3
      if self.tag11 is None:
        self.tag11 = [0.] * 3
      if self.tag12 is None:
        self.tag12 = [0.] * 3
      if self.tag13 is None:
        self.tag13 = [0.] * 3
      if self.tag14 is None:
        self.tag14 = [0.] * 3
    else:
      self.tag1 = [0.] * 3
      self.tag2 = [0.] * 3
      self.tag3 = [0.] * 3
      self.tag4 = [0.] * 3
      self.tag5 = [0.] * 3
      self.tag6 = [0.] * 3
      self.tag7 = [0.] * 3
      self.tag8 = [0.] * 3
      self.tag9 = [0.] * 3
      self.tag10 = [0.] * 3
      self.tag11 = [0.] * 3
      self.tag12 = [0.] * 3
      self.tag13 = [0.] * 3
      self.tag14 = [0.] * 3

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_3f().pack(*self.tag1))
      buff.write(_get_struct_3f().pack(*self.tag2))
      buff.write(_get_struct_3f().pack(*self.tag3))
      buff.write(_get_struct_3f().pack(*self.tag4))
      buff.write(_get_struct_3f().pack(*self.tag5))
      buff.write(_get_struct_3f().pack(*self.tag6))
      buff.write(_get_struct_3f().pack(*self.tag7))
      buff.write(_get_struct_3f().pack(*self.tag8))
      buff.write(_get_struct_3f().pack(*self.tag9))
      buff.write(_get_struct_3f().pack(*self.tag10))
      buff.write(_get_struct_3f().pack(*self.tag11))
      buff.write(_get_struct_3f().pack(*self.tag12))
      buff.write(_get_struct_3f().pack(*self.tag13))
      buff.write(_get_struct_3f().pack(*self.tag14))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 12
      self.tag1 = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 12
      self.tag2 = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 12
      self.tag3 = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 12
      self.tag4 = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 12
      self.tag5 = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 12
      self.tag6 = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 12
      self.tag7 = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 12
      self.tag8 = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 12
      self.tag9 = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 12
      self.tag10 = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 12
      self.tag11 = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 12
      self.tag12 = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 12
      self.tag13 = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 12
      self.tag14 = _get_struct_3f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(self.tag1.tostring())
      buff.write(self.tag2.tostring())
      buff.write(self.tag3.tostring())
      buff.write(self.tag4.tostring())
      buff.write(self.tag5.tostring())
      buff.write(self.tag6.tostring())
      buff.write(self.tag7.tostring())
      buff.write(self.tag8.tostring())
      buff.write(self.tag9.tostring())
      buff.write(self.tag10.tostring())
      buff.write(self.tag11.tostring())
      buff.write(self.tag12.tostring())
      buff.write(self.tag13.tostring())
      buff.write(self.tag14.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 12
      self.tag1 = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.tag2 = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.tag3 = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.tag4 = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.tag5 = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.tag6 = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.tag7 = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.tag8 = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.tag9 = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.tag10 = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.tag11 = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.tag12 = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.tag13 = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.tag14 = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from erc_aruco_msg/ErcArucoResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ErcArucoResponse(genpy.Message):
  _md5sum = "44f46b92fb243edcf5d498fd500e3a88"
  _type = "erc_aruco_msg/ErcArucoResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 score

"""
  __slots__ = ['score']
  _slot_types = ['float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       score

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ErcArucoResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.score is None:
        self.score = 0.
    else:
      self.score = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.score
      buff.write(_get_struct_f().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (self.score,) = _get_struct_f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.score
      buff.write(_get_struct_f().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (self.score,) = _get_struct_f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
class ErcAruco(object):
  _type          = 'erc_aruco_msg/ErcAruco'
  _md5sum = '715a825b614df3219624e3f0adb1b4b3'
  _request_class  = ErcArucoRequest
  _response_class = ErcArucoResponse
